% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MakeForest.R
\name{MakeForest}
\alias{MakeForest}
\title{Create a Rcpp_Forest Object}
\usage{
MakeForest(hypers, opts, warn = TRUE)
}
\arguments{
\item{hypers}{List of hyperparameter values obtained from Hypers function}

\item{opts}{List of MCMC chain settings obtained from Opts function}

\item{warn}{If TRUE, reminds the user to normalize their design matrix when interacting with a forest object.}
}
\value{
Returns an object of type Rcpp_Forest. It contains the following
functions.
\itemize{
  \item do_gibbs: forest$do_gibbs(X, Y, X_test, i) runs i iterations of the Bayesian backfitting algorithm and predicts on the test set X_test. The state of forest is also updated.
  \item do_gibbs_weighted: forest$do_gibbs_weighted(X, Y, weights X_test, i) runs i iterations of the Bayesian backfitting algorithm and predicts on the test set X_test; assumes that Y is heteroskedastic with known weights. The state of forest is also updated.
  \item do_predict: forest$do_predict(X) returns the predictions from a matrix X of predictors
  \item get_counts: forest$get_counts() returns the number of times each variable has been used in a splitting rule
  \item get_s: forest$get_s() returns the splitting probabilities of the forest
  \item get_sigma: forest$get_sigma() returns the error standard deviation of the forest
  \item get_sigma_mu: forest$get_sigma_mu() returns the standard deviation of the leaf node parameters
  \item get_tree_counts: forest$get_tree_counts() returns a P x T matrix that counts the number of times each predictor is used in each tree
  \item predict_iteration: forest$predict_iteration(X, i) returns the predictions from a matrix X of predictors at iteration i. Requires that opts$cache_trees = TRUE
  \item set_s: forest$set_s(s) sets the splitting probabilities of the forest to s
  \item set_sigma: forest$set_sigma(x) sets the error standard deviation of the forest to x
  \item num_gibbs: forest$num_gibbs returns the number of iterations in total that the Gibbs sampler has been run
}
}
\description{
Make an object of type Rcpp_Forest, which can be used to embed SoftBART into 
other larger models. Some examples are given in the inst/scripts folder, and
more details will be available in a forthcoming manuscript of Linero (2022+).
}
\examples{
\donttest{
X <- matrix(runif(100 * 10), nrow = 100, ncol = 10)
Y <- rowSums(X) + rnorm(100)
my_forest <- MakeForest(Hypers(X,Y), Opts())
mu_hat <- my_forest$do_gibbs(X,Y,X,200)
}
}
